@using DataPatrolTask.Models
@using DataPatrolTask.Services.Interfaces
@using MudBlazor

@inject IUserInfoRepository UserRepo
@inject IUserGroupRepository GroupRepo

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">Assign Users to @Group.Description</MudText>
        <MudList T="UserSelection" Items="allUsers">
            @foreach (var user in allUsers)
            {
                <MudListItem>
                    <MudCheckBox @bind-Checked="user.IsSelected" Label="@user.UserName" />
                </MudListItem>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Save" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="() => MudDialog.Cancel()" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public UserGroup Group { get; set; } = default!;

    private List<UserSelection> allUsers = new();

    protected override async Task OnInitializedAsync()
    {
        var users = await UserRepo.GetAllAsync();
        var assignedUserIds = await GroupRepo.GetUserIdsByGroupAsync(Group.GroupId);

        allUsers = users.Select(u => new UserSelection
        {
            UserId = u.UserId,
            UserName = u.Username,
            IsSelected = assignedUserIds.Contains(u.UserId)
        }).ToList();
    }

    private async Task Save()
    {
        var selected = allUsers.Where(u => u.IsSelected).Select(u => u.UserId).ToList();
        await GroupRepo.AssignUserGroupsAsync(Group.GroupId, selected);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private class UserSelection
    {
        public string UserId { get; set; } = "";
        public string UserName { get; set; } = "";
        public bool IsSelected { get; set; }
    }
}
