@using DataPatrolTask.Models
@using DataPatrolTask.Services.Interfaces
@using MudBlazor
@inject IUserRequestRepository UserRequestService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">@((Request?.RequestId > 0) ? "Edit Request" : "Create Request")</MudText>

        <MudTextField Label="Requested By" @bind-Value="Request.RequestedBy" />
        <MudTextField Label="Requested User ID" @bind-Value="Request.RequestedUserUserId" />
        <MudTextField Label="Description" @bind-Value="Request.Description" />
        <MudNumericField T="int" Label="Request Code" @bind-Value="Request.RequestCode" />
        <MudSelect T="RequestStatus" Label="Status" @bind-Value="Request.Status">
            @foreach (RequestStatus status in Enum.GetValues(typeof(RequestStatus)))
            {
                <MudSelectItem Value="@status">@status</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Save" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public UserRequest? Request { get; set; }

    private async Task Save()
    {
        if (Request is null)
        {
            Snackbar.Add("Invalid data.", Severity.Error);
            return;
        }

        if (Request.RequestId > 0)
        {
            await UserRequestService.UpdateAsync(Request.RequestId, Request);
            Snackbar.Add("Request updated successfully.", Severity.Success);
        }
        else
        {
            await UserRequestService.CreateAsync(Request);
            Snackbar.Add("Request created successfully.", Severity.Success);
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();
}
